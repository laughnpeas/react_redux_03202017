import * as React from "react";
import * as ReactDOM from "react-dom";
import { createStore, bindActionCreators, Action, Store  } from "redux";
// import { connect } from "react-redux";

// const createStore = (reducer: any) => {

//     let state: any;
//     const cbFns: any[] = [];

//     return {
//         getState() {
//             return state;
//         },
//         dispatch(action: any) {
//             state = reducer(state, action);
//             cbFns.forEach((cb) => cb());
//         },
//         subscribe(cb: any) {
//             cbFns.push(cb);
//         },
//     };

// };

enum ActionTypes {
    Add, Subtract, Multiply, Divide,
}

interface AppState {
    value: number;
}

interface CalcAction extends Action {
    value: number;
}

const reducer = (state: AppState = { value: 0 }, action: CalcAction) => {
    switch (action.type) {
        case ActionTypes.Add:
            return Object.assign({}, state, { value: state.value + action.value });
        case ActionTypes.Subtract:
            return Object.assign({}, state, { value: state.value - action.value });
        case ActionTypes.Multiply:
            return Object.assign({}, state, { value: state.value * action.value });
        case ActionTypes.Divide:
            return Object.assign({}, state, { value: state.value / action.value });
        default:
            return state;
    }
};

const store: Store<AppState> = createStore<AppState>(reducer);

store.subscribe(() => {
    console.log("new state", store.getState());
});

const addActionCreator: (value: number) => CalcAction = (value: number) =>
    ({ type: ActionTypes.Add, value });

const subtractActionCreator: (value: number) => CalcAction = (value: number) =>
    ({ type: ActionTypes.Subtract, value });

const multiplyActionCreator: (value: number) => CalcAction = (value: number) =>
    ({ type: ActionTypes.Multiply, value });

const divideActionCreator: (value: number) => CalcAction = (value: number) =>
    ({ type: ActionTypes.Divide, value });


// const bindActionCreators = (actionCreators: any, dispatchFn: any) => {

//     const actions = {};

//     Object.keys(actionCreators).forEach((key: any) => {
//         actions[key] = (...params: any[]) => {
//             dispatchFn(actionCreators[key](...params));
//         };
//     });

//     return actions;
// };

const mapStateToPropsForCalculatorTool: (state: AppState) => { results: number } = (state: AppState) => {
    return {
        results: state.value,
    };
};

const mapDispatchToPropsForCalculatorTool: (dispatch: any) => { add: Function } = (dispatch: any) => {
    return bindActionCreators({
        add: addActionCreator,
    }, dispatch);
};


// add(1);
// subtract(2);
// add(3);
// subtract(4);
// add(5);
// multiply(10);
// divide(5);

interface CalculatorToolProps {
    add: any;
    results: number;
}

interface CalculatorToolState {
    value: number;
}

class CalculatorTool extends React.Component<CalculatorToolProps, CalculatorToolState> {

    constructor(props: CalculatorToolProps) {
        super(props);

        this.state = {
            value: 0,
        };
    }

    public onChange = (e: any) => {
        this.setState({
            value: Number(e.currentTarget.value),
        });
    }

    public onClick = () => {
        this.props.add(this.state.value);
    }

    public render() {

        return <div>
            <div>Result: {this.props.results}</div>
            <input type="text" value={this.state.value.toString()} onChange={this.onChange} />
            <button type="button" onClick={this.onClick}>Add</button>
        </div>;

    }

}


const connect = (mapStateToProps: (state: AppState) => any, mapDispatchToProps: any) => {

    return (ComponentClass: any) => {

        return class extends React.Component<any, any> {

            constructor(props: any) {
                super(props);

                this.state = {
                    componentProps: Object.assign(
                        mapDispatchToProps(this.props.store.dispatch),
                        mapStateToProps(this.props.store.getState()),
                    ),
                };
            }

            public componentDidMount() {

                this.props.store.subscribe(() => {

                    this.setState({
                        componentProps: Object.assign({}, this.state.componentProps, mapStateToProps(this.props.store.getState())),
                    });
                });

            }


            public render() {
                return <ComponentClass {...this.state.componentProps} />;
            }

        };

    };

};

const CalculatorToolContainer = connect(
    mapStateToPropsForCalculatorTool, mapDispatchToPropsForCalculatorTool
)(CalculatorTool);



ReactDOM.render(<CalculatorToolContainer store={store} />, document.querySelector("main"));

